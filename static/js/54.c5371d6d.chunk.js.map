{"version":3,"file":"static/js/54.c5371d6d.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styles.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","components/redux/selector.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\nborder: 1px solid lightblue;\nborder-radius: 5px;\nwidth: 350px;\npadding: 20px 30px;`\n\nexport const FormTitle = styled.h2`\ncolor: grey;\nfont-size: 16px;\ndisplay: inline-flex;\nflex-wrap: wrap;`\n\nexport const Button = styled.button`\nwidth: 180px;\n  padding: 6px;\n  margin-top: 20px;\n  margin-left: 80px;\nbackground-color: lightblue;\ncolor: white;\nborder-radius: 2px;\nborder:none;\npadding: 5px;\ncursor: pointer;\n`\nexport const Input = styled.input`\ndisplay: flex;\n  justify-content: space-between;\n  width: 250px;\n:hover,\n  :focus {\n    border-color: lightblue;\n    display: inline-flex;\n  }`","import React, { useState } from 'react';\n\nimport { Form, FormTitle, Button, Input } from './ContactForm.styled';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from 'components/redux/contacts.thunk';\n\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector((state) => state.contacts.contacts);\n   const dispatch = useDispatch(); \n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        throw new Error('Unexpected type of field');\n    }\n  };\n\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n  \n    if (contacts.find(contact => contact.name === name)) {\n      return alert(`${name} is is already in contacts.`);\n    } else {\n    dispatch(\n        addContact({\n          name,\n          phone: number,\n        })\n      );\n    \n      reset();\n    }\n  };\n  \n  \n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n                 <FormTitle>Name</FormTitle>\n                 <Input\n                    value={name}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    onChange={handleChange}\n          \n                    required />\n                <FormTitle>Number</FormTitle>\n                <Input\n                    value={number}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    onChange={handleChange}\n                    required />\n                <Button type=\"submit\" >\n                    Add contact\n                </Button>\n            </Form>\n  )\n}","import styled from 'styled-components';\n\nexport const ItemInfo = styled.p`\ncolor: grey;\nfont-size:14px;\nmargin-right: 20px;`\n\nexport const Button = styled.button`\npadding: 0px;\n width: 90px;\n height: 30px; \n margin-top:10px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: cubic-bezier(0.075, 0.82, 0.165, 1) 3250ms;`","    import PropTypes from 'prop-types';\nimport { useDispatch} from 'react-redux';\nimport { ItemInfo, Button } from '../ContactItem/ContactItem.styles';\nimport { deleteContact } from '../redux/contacts.thunk';\n\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch(); \n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <>\n      <ItemInfo>{name}</ItemInfo>\n      <ItemInfo>{number}</ItemInfo>\n      <Button\n        type=\"button\"\n        onClick={onDeleteContact}\n      >\n        Delete\n      </Button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};","import styled from 'styled-components';\n\nexport const ContactGroup = styled.ul`\nwidth: 412px;\npadding: 0px;\n`\n\nexport const Item = styled.li`\ndisplay: flex;\njustify-content: space-between;\n  width: 412px;\nmargin-top: 10px;\n`","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n export const selectFilter = state => state.filter;\n\n\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return !filter\n      ? contacts\n      : contacts.filter(e =>\n          e.name.toLowerCase().includes(filter.toLowerCase())\n        );\n  }\n);","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { ContactGroup, Item } from '../ContactList/ContactList.styled';\nimport { selectFilteredContacts, selectContacts } from \"components/redux/selector\";\n\nexport const ContactList = () => {\n   const filteredContacts = useSelector(selectFilteredContacts);\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <ContactGroup >\n      {contacts.length > 0 &&\n        filteredContacts.map(({ id, name, phone }) => {\n        return (\n          <Item  key={id}>\n            <ContactItem\n              id={id}\n              name={name}\n              number={phone}\n            />\n          </Item>\n        );\n      })}\n    </ContactGroup>\n  );\n};","import styled from 'styled-components';\n\nexport const Label = styled.label`\nfont-weight: 500;`\n\nexport const Input = styled.input`\nmargin-left: 25px;\nwidth: 220px;`","import { Label, Input } from '../Filter/Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'components/redux/filterSlice';\nimport { selectFilter } from 'components/redux/selector';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n\n  const onFilterChange = (e) => {\n    dispatch(setFilter(e.target.value));\n  };\n    return (\n        <Label > Find contacts by name\n            <Input type=\"text\" value={filter} onChange={onFilterChange} />\n            </Label>\n    )\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { Loader } from 'components/Loader';\nimport { selectError, selectIsLoading } from 'components/redux/selector';\nimport { fetchContacts } from 'components/redux/contacts.thunk';\n\nconst Contacts = () => {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    return (\n        <>\n            <ContactForm />\n            <Filter />\n            {isLoading && !error && <Loader />}\n            {error && <p>{error}</p>}\n            {!isLoading && <ContactList />}\n        </>\n    );\n};\n\nexport default Contacts;"],"names":["Form","styled","FormTitle","Button","Input","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","handleChange","e","currentTarget","value","Error","reset","onSubmit","preventDefault","find","contact","alert","addContact","phone","type","pattern","title","onChange","required","ItemInfo","ContactItem","id","onClick","deleteContact","ContactGroup","Item","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","toLowerCase","includes","ContactList","filteredContacts","Label","Filter","setFilter","target","useEffect","fetchContacts","Loader"],"sourceRoot":""}